openapi: 3.1.1
info:
  title: StepoBackend.Api | v1
  version: 1.0.0
paths:
  /api/v1/account:
    get:
      tags:
        - Account
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AccountDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
    delete:
      tags:
        - Account
      responses:
        "200":
          description: OK
    put:
      tags:
        - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserDto'
          text/json:
            schema:
              $ref: '#/components/schemas/EditUserDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/EditUserDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AccountDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
  /api/v1/account/avatar:
    post:
      tags:
        - Account
      requestBody:
        content:
          image/jpg:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
          image/gif:
            schema:
              type: string
              format: binary
          image/webp:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AccountDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
  /api/v1/account/journeys:
    get:
      tags:
        - Account
      parameters:
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JourneyInProfileDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JourneyInProfileDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JourneyInProfileDto'
  /api/v1/account/steps:
    get:
      tags:
        - Account
      parameters:
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
  /api/v1/auth/login:
    post:
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
          text/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LoginDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
            text/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
  /api/v1/users/{id}:
    get:
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProfileDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
  /api/v1/users/{id}/journeys:
    get:
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JourneyInProfileDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JourneyInProfileDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JourneyInProfileDto'
  /api/v1/users/{id}/steps:
    get:
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
  /api/v1/steps:
    post:
      tags:
        - Steps
      summary: Create a new step for a journey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStepDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateStepDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateStepDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
  /api/v1/steps/{stepId}:
    get:
      tags:
        - Steps
      summary: Get step details by ID
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
    put:
      tags:
        - Steps
      summary: Update step details
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStepDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateStepDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateStepDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
    delete:
      tags:
        - Steps
      summary: Delete a step
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
  /api/v1/steps/{stepId}/images:
    post:
      tags:
        - Steps
      summary: Upload an image for a step
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          image/jpg:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
          image/gif:
            schema:
              type: string
              format: binary
          image/webp:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StepMediaDto'
            application/json:
              schema:
                $ref: '#/components/schemas/StepMediaDto'
            text/json:
              schema:
                $ref: '#/components/schemas/StepMediaDto'
  /api/v1/steps/{stepId}/video:
    put:
      tags:
        - Steps
      summary: Get video upload URL for a step
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/VideoPreSignedUrlDto'
            application/json:
              schema:
                $ref: '#/components/schemas/VideoPreSignedUrlDto'
            text/json:
              schema:
                $ref: '#/components/schemas/VideoPreSignedUrlDto'
  /api/v1/reports:
    post:
      tags:
        - Reports
      summary: Create a report for inappropriate content
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportCreatingDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ReportCreatingDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ReportCreatingDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ReportDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ReportDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ReportDto'
    get:
      tags:
        - Reports
      summary: Get reports for content moderation
      parameters:
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 15
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportDto'
  /api/v1/admin/notifications/test-send:
    post:
      tags:
        - AdminNotifications
      summary: Send test notification (Admin only)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestNotificationDto'
          text/json:
            schema:
              $ref: '#/components/schemas/TestNotificationDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TestNotificationDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TestNotificationResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TestNotificationResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TestNotificationResultDto'
  /api/v1/notifications/devices/register:
    post:
      tags:
        - DeviceToken
      summary: Register device token for secure notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDeviceDto'
          text/json:
            schema:
              $ref: '#/components/schemas/RegisterDeviceDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RegisterDeviceDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DeviceTokenDto'
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceTokenDto'
            text/json:
              schema:
                $ref: '#/components/schemas/DeviceTokenDto'
  /api/v1/notifications/devices/{token}:
    delete:
      tags:
        - DeviceToken
      summary: Unregister device token
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /api/v1/notifications/devices:
    get:
      tags:
        - DeviceToken
      summary: Get user's registered devices
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceTokenDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceTokenDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceTokenDto'
  /api/v1/notifications/devices/validate:
    post:
      tags:
        - DeviceToken
      summary: Validate and cleanup invalid tokens
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TokenValidationResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TokenValidationResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TokenValidationResultDto'
  /api/v1/notifications/preferences:
    get:
      tags:
        - NotificationPreferences
      summary: Get user notification preferences
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotificationPreferencesDto'
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferencesDto'
            text/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferencesDto'
    put:
      tags:
        - NotificationPreferences
      summary: Update user notification preferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePreferencesDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdatePreferencesDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdatePreferencesDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotificationPreferencesDto'
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferencesDto'
            text/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferencesDto'
  /api/v1/notifications:
    get:
      tags:
        - Notifications
      summary: Get user notifications with pagination
      parameters:
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 20
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotificationPagedDto'
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPagedDto'
            text/json:
              schema:
                $ref: '#/components/schemas/NotificationPagedDto'
  /api/v1/notifications/summary:
    get:
      tags:
        - Notifications
      summary: Get unread notifications count
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                pattern: ^-?(?:0|[1-9]\d*)$
                type:
                  - integer
                  - string
                format: int32
            application/json:
              schema:
                pattern: ^-?(?:0|[1-9]\d*)$
                type:
                  - integer
                  - string
                format: int32
            text/json:
              schema:
                pattern: ^-?(?:0|[1-9]\d*)$
                type:
                  - integer
                  - string
                format: int32
  /api/v1/notifications/{notificationId}/read:
    put:
      tags:
        - Notifications
      summary: Mark notification as read
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
  /api/v1/notifications/read-status:
    put:
      tags:
        - Notifications
      summary: Mark all notifications as read
      responses:
        "200":
          description: OK
  /api/v1/notifications/{notificationId}:
    delete:
      tags:
        - Notifications
      summary: Delete a notification
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
  /api/v1/moderation/comments/{commentId}:
    delete:
      tags:
        - Moderation
      summary: Remove a comment by moderation
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveContentDto'
          text/json:
            schema:
              $ref: '#/components/schemas/RemoveContentDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RemoveContentDto'
        required: true
      responses:
        "200":
          description: OK
  /api/v1/moderation/steps/{stepId}:
    delete:
      tags:
        - Moderation
      summary: Remove a step by moderation
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveContentDto'
          text/json:
            schema:
              $ref: '#/components/schemas/RemoveContentDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RemoveContentDto'
        required: true
      responses:
        "200":
          description: OK
  /api/v1/moderation/journeys/{journeyId}:
    delete:
      tags:
        - Moderation
      summary: Remove a journey by moderation
      parameters:
        - name: journeyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveContentDto'
          text/json:
            schema:
              $ref: '#/components/schemas/RemoveContentDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RemoveContentDto'
        required: true
      responses:
        "200":
          description: OK
  /api/v1/moderation/users/{userId}/ban:
    post:
      tags:
        - Moderation
      summary: Ban a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BanUserDto'
          text/json:
            schema:
              $ref: '#/components/schemas/BanUserDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BanUserDto'
        required: true
      responses:
        "200":
          description: OK
  /api/v1/moderation/users/{userId}/unban:
    post:
      tags:
        - Moderation
      summary: Unban a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /api/v1/moderation/users/{userId}/status:
    put:
      tags:
        - Moderation
      summary: Update user status
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserStatusDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateUserStatusDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateUserStatusDto'
        required: true
      responses:
        "200":
          description: OK
  /api/v1/moderation/users/{userId}:
    get:
      tags:
        - Moderation
      summary: Get user moderation details
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /api/v1/moderation/users/banned:
    get:
      tags:
        - Moderation
      summary: Get list of banned users
      parameters:
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 20
      responses:
        "200":
          description: OK
  /api/v1/moderation/users/shadow-banned:
    get:
      tags:
        - Moderation
      summary: Get list of shadow banned users
      parameters:
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 20
      responses:
        "200":
          description: OK
  /api/v1/media/videos:
    post:
      tags:
        - Media
      parameters:
        - name: stepId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/VideoPreSignedUrlDto'
            application/json:
              schema:
                $ref: '#/components/schemas/VideoPreSignedUrlDto'
            text/json:
              schema:
                $ref: '#/components/schemas/VideoPreSignedUrlDto'
  /api/v1/media/{mediaId}:
    get:
      tags:
        - Media
      parameters:
        - name: mediaId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StepMediaDto'
            application/json:
              schema:
                $ref: '#/components/schemas/StepMediaDto'
            text/json:
              schema:
                $ref: '#/components/schemas/StepMediaDto'
  /api/v1/webhooks/video-updates:
    post:
      tags:
        - VideoProcessing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoStatusDto'
          text/json:
            schema:
              $ref: '#/components/schemas/VideoStatusDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/VideoStatusDto'
        required: true
      responses:
        "200":
          description: OK
  /api/v1/video-jobs:
    post:
      tags:
        - VideoProcessing
      responses:
        "200":
          description: OK
  /api/v1/journeys/{journeyId}/follow:
    post:
      tags:
        - JourneyFollow
      summary: Follow a journey for step notifications
      parameters:
        - name: journeyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
    delete:
      tags:
        - JourneyFollow
      summary: Unfollow a journey
      parameters:
        - name: journeyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
  /api/v1/journeys/{id}:
    get:
      tags:
        - Journeys
      summary: Get journey details by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/JourneyInDetailDto'
            application/json:
              schema:
                $ref: '#/components/schemas/JourneyInDetailDto'
            text/json:
              schema:
                $ref: '#/components/schemas/JourneyInDetailDto'
    put:
      tags:
        - Journeys
      summary: Update journey details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateJourneyDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateJourneyDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateJourneyDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/JourneyDto'
            application/json:
              schema:
                $ref: '#/components/schemas/JourneyDto'
            text/json:
              schema:
                $ref: '#/components/schemas/JourneyDto'
    delete:
      tags:
        - Journeys
      summary: Delete a journey
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
  /api/v1/journeys:
    post:
      tags:
        - Journeys
      summary: Create a new journey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JourneyCreatingDto'
          text/json:
            schema:
              $ref: '#/components/schemas/JourneyCreatingDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/JourneyCreatingDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
  /api/v1/journeys/{id}/close:
    post:
      tags:
        - Journeys
      summary: Close a journey
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: finalStepId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/JourneyDto'
            application/json:
              schema:
                $ref: '#/components/schemas/JourneyDto'
            text/json:
              schema:
                $ref: '#/components/schemas/JourneyDto'
  /api/v1/journeys/{id}/reopen:
    post:
      tags:
        - Journeys
      summary: Reopen a closed journey
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/JourneyDto'
            application/json:
              schema:
                $ref: '#/components/schemas/JourneyDto'
            text/json:
              schema:
                $ref: '#/components/schemas/JourneyDto'
  /api/v1/journeys/{journeyId}/steps-detail:
    get:
      tags:
        - Journeys
      summary: Get detailed steps for a journey (authenticated view)
      parameters:
        - name: journeyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
  /api/v1/journeys/{journeyId}/steps:
    get:
      tags:
        - Journeys
      summary: Get steps for a journey (public view)
      parameters:
        - name: journeyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
  /api/v1/journeys/{journeyId}/calendar:
    get:
      tags:
        - Journeys
      summary: Get calendar view of journey steps
      parameters:
        - name: journeyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JourneyDayCalendarDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JourneyDayCalendarDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JourneyDayCalendarDto'
  /api/v1/journeys/newer-steps/{stepId}:
    get:
      tags:
        - Journeys
      summary: Get steps newer than the specified step within its journey
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
  /api/v1/journeys/older-steps/{stepId}:
    get:
      tags:
        - Journeys
      summary: Get steps older than the specified step within its journey
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
  /api/v1/steps/{stepId}/hearts:
    post:
      tags:
        - Interactions
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStepInteractionDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateStepInteractionDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateStepInteractionDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
    delete:
      tags:
        - Interactions
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
  /api/v1/steps/{stepId}/shares:
    post:
      tags:
        - Interactions
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStepInteractionDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateStepInteractionDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateStepInteractionDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
  /api/v1/steps/{stepId}/interactions:
    get:
      tags:
        - Interactions
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
  /api/v1/steps/comments/{commentId}/hearts:
    post:
      tags:
        - Interactions
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentInteractionDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateCommentInteractionDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateCommentInteractionDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
    delete:
      tags:
        - Interactions
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
  /api/v1/account/followers:
    get:
      tags:
        - AccountFollow
      summary: Get my followers list
      parameters:
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
  /api/v1/account/followings:
    get:
      tags:
        - AccountFollow
      summary: Get my followings list
      parameters:
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
  /api/v1/account/follow-requests/incoming:
    get:
      tags:
        - AccountFollow
      summary: Get incoming follow requests
      parameters:
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FollowRequestDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FollowRequestDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FollowRequestDto'
  /api/v1/account/follow-requests/outgoing:
    get:
      tags:
        - AccountFollow
      summary: Get outgoing follow requests
      parameters:
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FollowRequestDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FollowRequestDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FollowRequestDto'
  /api/v1/account/follow-requests/{requesterId}/accept:
    post:
      tags:
        - AccountFollow
      summary: Accept a follow request
      parameters:
        - name: requesterId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FollowRequestResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/FollowRequestResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/FollowRequestResultDto'
  /api/v1/account/follow-requests/{requesterId}/reject:
    delete:
      tags:
        - AccountFollow
      summary: Reject a follow request
      parameters:
        - name: requesterId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FollowRequestResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/FollowRequestResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/FollowRequestResultDto'
  /api/v1/users/{userId}/follow:
    post:
      tags:
        - UsersFollow
      summary: Follow a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FollowingResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/FollowingResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/FollowingResultDto'
    delete:
      tags:
        - UsersFollow
      summary: Unfollow a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FollowingResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/FollowingResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/FollowingResultDto'
  /api/v1/users/{userId}/follow-status:
    get:
      tags:
        - UsersFollow
      summary: Get following status with a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FollowingStatusDto'
            application/json:
              schema:
                $ref: '#/components/schemas/FollowingStatusDto'
            text/json:
              schema:
                $ref: '#/components/schemas/FollowingStatusDto'
  /api/v1/users/{userId}/followers:
    get:
      tags:
        - UsersFollow
      summary: Get user's followers list
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
  /api/v1/users/{userId}/followings:
    get:
      tags:
        - UsersFollow
      summary: Get user's followings list
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
  /api/v1/users/{userId}/followers/count:
    get:
      tags:
        - UsersFollow
      summary: Get user's followers count
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                pattern: ^-?(?:0|[1-9]\d*)$
                type:
                  - integer
                  - string
                format: int32
            application/json:
              schema:
                pattern: ^-?(?:0|[1-9]\d*)$
                type:
                  - integer
                  - string
                format: int32
            text/json:
              schema:
                pattern: ^-?(?:0|[1-9]\d*)$
                type:
                  - integer
                  - string
                format: int32
  /api/v1/users/{userId}/followings/count:
    get:
      tags:
        - UsersFollow
      summary: Get user's followings count
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                pattern: ^-?(?:0|[1-9]\d*)$
                type:
                  - integer
                  - string
                format: int32
            application/json:
              schema:
                pattern: ^-?(?:0|[1-9]\d*)$
                type:
                  - integer
                  - string
                format: int32
            text/json:
              schema:
                pattern: ^-?(?:0|[1-9]\d*)$
                type:
                  - integer
                  - string
                format: int32
  /api/v1/feed:
    get:
      tags:
        - Feed
      parameters:
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
  /api/v1/feed/metrics:
    get:
      tags:
        - Feed
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FeedMetricsDto'
            application/json:
              schema:
                $ref: '#/components/schemas/FeedMetricsDto'
            text/json:
              schema:
                $ref: '#/components/schemas/FeedMetricsDto'
  /api/v1/feed/hot:
    get:
      tags:
        - Feed
      parameters:
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
  /api/v1/feed/following:
    get:
      tags:
        - Feed
      parameters:
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
  /api/v1/comments/{commentId}:
    delete:
      tags:
        - Comments
      summary: Delete a comment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
  /api/v1/comments/{parentCommentId}/replies:
    post:
      tags:
        - Comments
      summary: Create a reply to a comment
      parameters:
        - name: parentCommentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReplyCommentDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateReplyCommentDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateReplyCommentDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ReplyDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ReplyDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ReplyDto'
  /api/v1/comments/{commentId}/replies:
    get:
      tags:
        - Comments
      summary: Get replies for a comment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplyDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplyDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplyDto'
  /api/v1/steps/{stepId}/comments:
    get:
      tags:
        - StepComments
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepCommentDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepCommentDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepCommentDto'
    post:
      tags:
        - StepComments
      parameters:
        - name: stepId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStepCommentDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateStepCommentDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateStepCommentDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StepCommentDto'
            application/json:
              schema:
                $ref: '#/components/schemas/StepCommentDto'
            text/json:
              schema:
                $ref: '#/components/schemas/StepCommentDto'
  /api/v1/admin/feedback:
    get:
      tags:
        - AdminFeedback
      summary: Get all feedback submissions for admin review
      parameters:
        - name: page
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 1
        - name: pageSize
          in: query
          schema:
            pattern: ^-?(?:0|[1-9]\d*)$
            type:
              - integer
              - string
            format: int32
            default: 20
        - name: type
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PageResponseOfAppFeedbackDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseOfAppFeedbackDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PageResponseOfAppFeedbackDto'
  /api/v1/admin/feedback/{id}/status:
    put:
      tags:
        - AdminFeedback
      summary: Update feedback status and add admin response
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFeedbackStatusDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateFeedbackStatusDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateFeedbackStatusDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AppFeedbackDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AppFeedbackDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AppFeedbackDto'
  /api/v1/appfeedback:
    post:
      tags:
        - AppFeedback
      summary: Submit app feedback or bug report
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAppFeedbackDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateAppFeedbackDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateAppFeedbackDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AppFeedbackDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AppFeedbackDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AppFeedbackDto'
  /api/v1/appfeedback/{feedbackId}/image:
    post:
      tags:
        - AppFeedback
      summary: Upload an image for feedback
      parameters:
        - name: feedbackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          image/jpg:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
          image/gif:
            schema:
              type: string
              format: binary
          image/webp:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AppFeedbackDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AppFeedbackDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AppFeedbackDto'
  /api/v1/appfeedback/{id}:
    get:
      tags:
        - AppFeedback
      summary: Get feedback by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AppFeedbackDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AppFeedbackDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AppFeedbackDto'
    delete:
      tags:
        - AppFeedback
      summary: Delete user's own feedback
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
  /api/v1/appfeedback/my-feedback:
    get:
      tags:
        - AppFeedback
      summary: Get current user's feedback submissions
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppFeedbackDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppFeedbackDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppFeedbackDto'
components:
  schemas:
    AccountDto:
      required:
        - id
        - user
      type: object
      properties:
        id:
          type: string
        user:
          $ref: '#/components/schemas/UserDto'
    AppFeedbackDto:
      required:
        - id
        - content
        - feedbackType
        - status
        - user
        - createdDate
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
        feedbackType:
          $ref: '#/components/schemas/FeedbackType'
        status:
          $ref: '#/components/schemas/FeedbackStatus'
        imageUrl:
          type:
            - "null"
            - string
        deviceInfo:
          type:
            - "null"
            - string
        appVersion:
          type:
            - "null"
            - string
        user:
          $ref: '#/components/schemas/UserDto'
        createdDate:
          type: string
          format: date-time
        adminResponse:
          type:
            - "null"
            - string
        respondedDate:
          type:
            - "null"
            - string
          format: date-time
    BanUserDto:
      required:
        - reason
      type: object
      properties:
        reason:
          maxLength: 500
          type: string
        isShadowBan:
          type: boolean
          default: false
        additionalNotes:
          maxLength: 1000
          type:
            - "null"
            - string
    CreateAppFeedbackDto:
      required:
        - content
        - feedbackType
      type: object
      properties:
        content:
          maxLength: 1000
          type: string
        feedbackType:
          $ref: '#/components/schemas/FeedbackType'
        deviceInfo:
          type:
            - "null"
            - string
        appVersion:
          maxLength: 50
          type:
            - "null"
            - string
    CreateCommentInteractionDto:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/InteractionType'
    CreateReplyCommentDto:
      required:
        - content
      type: object
      properties:
        content:
          maxLength: 500
          type: string
          default: ""
        responseToUserId:
          type:
            - "null"
            - string
        responseToCommentId:
          type:
            - "null"
            - string
          format: uuid
    CreateStepCommentDto:
      required:
        - content
      type: object
      properties:
        content:
          maxLength: 500
          type: string
          default: ""
    CreateStepDto:
      required:
        - content
        - journeyId
      type: object
      properties:
        content:
          maxLength: 1000
          type: string
          default: ""
        journeyId:
          type: string
          format: uuid
        isFinalStep:
          type: boolean
          default: false
    CreateStepInteractionDto:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/InteractionType'
    DeviceTokenDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        deviceToken:
          type: string
        platform:
          type: string
        isActive:
          type: boolean
        lastUsed:
          type: string
          format: date-time
        appVersion:
          type:
            - "null"
            - string
        deviceModel:
          type:
            - "null"
            - string
        deviceName:
          type:
            - "null"
            - string
        createdDate:
          type: string
          format: date-time
    EditUserDto:
      required:
        - displayName
        - username
      type: object
      properties:
        displayName:
          maxLength: 50
          minLength: 1
          type: string
          default: ""
        username:
          maxLength: 20
          minLength: 1
          type: string
          default: ""
        description:
          maxLength: 160
          type: string
          default: ""
        isPrivate:
          type: boolean
          default: false
    FeedbackStatus:
      enum:
        - Open
        - InProgress
        - Resolved
        - Closed
        - Duplicate
    FeedbackType:
      enum:
        - BugReport
        - FeatureRequest
        - GeneralFeedback
        - UiUxIssue
        - Performance
        - Other
    FeedMetricsDto:
      required:
        - followingCount
        - hotContentRatio
        - followingContentRatio
        - lastRefresh
      type: object
      properties:
        followingCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
        hotContentRatio:
          pattern: ^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$
          type:
            - number
            - string
          format: double
        followingContentRatio:
          pattern: ^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$
          type:
            - number
            - string
          format: double
        lastRefresh:
          type: string
          format: date-time
    FollowingResultDto:
      required:
        - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/FollowingStatusEnum'
        message:
          type:
            - "null"
            - string
    FollowingStatusDto:
      required:
        - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/FollowingStatusEnum'
    FollowingStatusEnum:
      enum:
        - NotFollowing
        - Following
        - Requested
      default: NotFollowing
    FollowRequestDto:
      required:
        - requesterId
        - requester
        - requestDate
      type: object
      properties:
        requesterId:
          type: string
        requester:
          $ref: '#/components/schemas/UserDetailDto'
        requestDate:
          type: string
          format: date-time
    FollowRequestResultDto:
      required:
        - result
        - newStatus
      type: object
      properties:
        result:
          type: string
        newStatus:
          $ref: '#/components/schemas/FollowingStatusEnum'
        message:
          type:
            - "null"
            - string
    InteractionResultDto:
      type: object
      properties:
        isSteppedWith:
          type: boolean
        isLiked:
          type: boolean
        totalLikes:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
    InteractionType:
      enum:
        - Heart
        - Share
        - Comment
      default: Heart
    JourneyCreatingDto:
      required:
        - title
        - firstStepContent
      type: object
      properties:
        title:
          maxLength: 100
          minLength: 1
          pattern: ^(?!\s*$).+
          type: string
          default: ""
        description:
          maxLength: 500
          minLength: 0
          type:
            - "null"
            - string
        firstStepContent:
          maxLength: 1000
          minLength: 1
          pattern: ^(?!\s*$).+
          type: string
          default: ""
    JourneyDayCalendarDto:
      required:
        - lastStep
        - date
      type: object
      properties:
        lastStep:
          $ref: '#/components/schemas/StepDto'
        totalSteps:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
          default: 0
        date:
          type: string
          format: date-time
    JourneyDto:
      required:
        - id
        - createdDate
        - lastUpdated
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          default: ""
        description:
          type: string
          default: ""
        createdDate:
          type: string
          format: date-time
        lastUpdated:
          type: string
          format: date-time
        status:
          type: string
          default: Open
        completedDate:
          type:
            - "null"
            - string
          format: date-time
        userId:
          type: string
          default: ""
        firstStepId:
          type:
            - "null"
            - string
          format: uuid
        finalStepId:
          type:
            - "null"
            - string
          format: uuid
        isDeleted:
          type: boolean
          default: false
        isUnavailable:
          type: boolean
          default: false
        unavailableReason:
          type:
            - "null"
            - string
          default: ""
    JourneyInDetailDto:
      required:
        - journey
        - stepsCount
        - lastStepDate
      type: object
      properties:
        journey:
          $ref: '#/components/schemas/JourneyDto'
        stepsCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
          default: 0
        lastStepDate:
          type: string
          format: date-time
        stepperCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
        latestSteppers:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        starterCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
        latestStarters:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        companionCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
        latestCompanions:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        celebratorCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
        latestCelebrators:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        companionProgress:
          pattern: ^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$
          type:
            - number
            - string
          format: double
          default: 0
        companionProgressMessage:
          type:
            - "null"
            - string
    JourneyInProfileDto:
      required:
        - journey
        - stepsCount
        - thumbnailSteps
      type: object
      properties:
        journey:
          $ref: '#/components/schemas/JourneyDto'
        stepsCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
        thumbnailSteps:
          type: array
          items:
            $ref: '#/components/schemas/StepMediaDto'
    LoginDto:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          default: ""
        password:
          type: string
          default: ""
    LoginResponseDto:
      type: object
      properties:
        token:
          type: string
          default: ""
        uid:
          type: string
          default: ""
    MediaStatus:
      enum:
        - Pending
        - Processing
        - Completed
        - Failed
    NotificationDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          default: ""
        body:
          type: string
          default: ""
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        isRead:
          type: boolean
        createdDate:
          type: string
          format: date-time
        data:
          type:
            - "null"
            - object
          additionalProperties:
            type: string
        priority:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
        relatedEntityId:
          type:
            - "null"
            - string
          format: uuid
        sourceUser:
          $ref: '#/components/schemas/UserDetailDto'
    NotificationPagedDto:
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/NotificationDto'
        page:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
        pageSize:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
        totalCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
        unreadCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
        hasMore:
          type: boolean
    NotificationPreferencesDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
        pushNotifications:
          type: boolean
        mentions:
          type: boolean
        oldStepNotifications:
          type: boolean
        trendingStepSuggestions:
          type: boolean
        trendingJourneySuggestions:
          type: boolean
        followSuggestions:
          type: boolean
    NotificationType:
      enum:
        - StepWithHeart
        - StepWithShare
        - StepWithComment
        - RegularHeart
        - RegularShare
        - RegularComment
        - CommentReply
        - CommentMention
        - NewFollower
        - FollowRequestAccepted
        - JourneyAchievement
        - JourneyFirstStep
        - NewStepAlert
        - SystemAnnouncement
        - SystemMaintenance
        - SystemUpdate
        - ModerationAlert
        - AccountWarning
        - SecurityAlert
    NullableOfUserRole:
      enum:
        - Moderator
        - Admin
        - SuperAdmin
        - null
    PageResponseOfAppFeedbackDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AppFeedbackDto'
        page:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
        pageSize:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
        totalCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
        totalPages:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
        hasNextPage:
          type: boolean
        hasPreviousPage:
          type: boolean
    ProfileDto:
      required:
        - userDetail
      type: object
      properties:
        userDetail:
          $ref: '#/components/schemas/UserDetailDto'
        badgesCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
          default: 0
        badgesUsers:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        supportersCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
          default: 0
        supportersUsers:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        followersCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
          default: 0
        followingsCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
          default: 0
    RegisterDeviceDto:
      type: object
      properties:
        deviceToken:
          type: string
        platform:
          type: string
        appVersion:
          type:
            - "null"
            - string
        deviceModel:
          type:
            - "null"
            - string
        deviceName:
          type:
            - "null"
            - string
    RemoveContentDto:
      required:
        - reason
      type: object
      properties:
        reason:
          maxLength: 500
          type: string
        additionalNotes:
          maxLength: 1000
          type:
            - "null"
            - string
    ReplyDto:
      required:
        - id
        - createdDate
        - lastUpdated
        - user
        - parentCommentId
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
          default: ""
        createdDate:
          type: string
          format: date-time
        lastUpdated:
          type: string
          format: date-time
        deletedDate:
          type:
            - "null"
            - string
          format: date-time
        user:
          $ref: '#/components/schemas/UserDto'
        parentCommentId:
          type: string
          format: uuid
        responseToUser:
          $ref: '#/components/schemas/UserDto'
        responseToCommentId:
          type:
            - "null"
            - string
          format: uuid
        heartCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
          default: 0
        heartedByUser:
          type: boolean
          default: false
    ReportCreatingDto:
      required:
        - entityType
        - entityId
        - reason
      type: object
      properties:
        entityType:
          type: string
        entityId:
          type: string
          default: ""
        reason:
          maxLength: 500
          type: string
    ReportDto:
      required:
        - entityType
        - reason
      type: object
      properties:
        id:
          type: string
          format: uuid
        entityType:
          type: string
        entityId:
          type: string
          default: ""
        reporter:
          $ref: '#/components/schemas/UserDto'
        reason:
          type: string
        createdDate:
          type: string
          format: date-time
    StepCommentDto:
      required:
        - id
        - createdDate
        - lastUpdated
        - user
        - stepId
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
          default: ""
        createdDate:
          type: string
          format: date-time
        lastUpdated:
          type: string
          format: date-time
        deletedDate:
          type:
            - "null"
            - string
          format: date-time
        user:
          $ref: '#/components/schemas/UserDto'
        stepId:
          type: string
          format: uuid
        heartCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
          default: 0
        heartedByUser:
          type: boolean
          default: false
        replyCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
          default: 0
        isDeleted:
          type: boolean
          default: false
        isUnavailable:
          type: boolean
          default: false
        unavailableReason:
          type:
            - "null"
            - string
          default: ""
    StepDetailDto:
      required:
        - user
        - journey
        - id
        - createdDate
        - lastUpdated
        - userId
        - journeyId
        - stepWithWindowHours
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserDto'
        journey:
          $ref: '#/components/schemas/JourneyDto'
        hearts:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
          default: 0
        heartedByUser:
          type: boolean
          default: false
        shares:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
          default: 0
        sharedByUser:
          type: boolean
          default: false
        comments:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
          default: 0
        commentedByUser:
          type: boolean
          default: false
        userSteppedWithInteractions:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
          default: 0
        othersStepWith:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
          default: 0
        othersStepWithUsers:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        stepType:
          $ref: '#/components/schemas/StepType'
        media:
          type: array
          items:
            $ref: '#/components/schemas/StepMediaDto'
        id:
          type: string
          format: uuid
        content:
          type: string
          default: ""
        createdDate:
          type: string
          format: date-time
        lastUpdated:
          type: string
          format: date-time
        userId:
          type: string
        journeyId:
          type: string
          format: uuid
        stepWithWindowHours:
          pattern: ^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$
          type:
            - number
            - string
          format: double
        isDeleted:
          type: boolean
          default: false
        isUnavailable:
          type: boolean
          default: false
        unavailableReason:
          type:
            - "null"
            - string
          default: ""
    StepDto:
      required:
        - id
        - createdDate
        - lastUpdated
        - userId
        - journeyId
        - stepWithWindowHours
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
          default: ""
        createdDate:
          type: string
          format: date-time
        lastUpdated:
          type: string
          format: date-time
        userId:
          type: string
        journeyId:
          type: string
          format: uuid
        stepWithWindowHours:
          pattern: ^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$
          type:
            - number
            - string
          format: double
        media:
          $ref: '#/components/schemas/StepMediaDto'
        isDeleted:
          type: boolean
          default: false
        isUnavailable:
          type: boolean
          default: false
        unavailableReason:
          type:
            - "null"
            - string
          default: ""
    StepMediaDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        stepId:
          type: string
          format: uuid
        mediaType:
          type: string
          default: ""
        originalUrl:
          type: string
          default: ""
        largeUrl:
          type:
            - "null"
            - string
        mediumUrl:
          type:
            - "null"
            - string
        smallUrl:
          type:
            - "null"
            - string
        thumbnailUrl:
          type:
            - "null"
            - string
        videoThumbnailUrl:
          type:
            - "null"
            - string
        bunnyVideoId:
          type:
            - "null"
            - string
        width:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - "null"
            - integer
            - string
          format: int32
        height:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - "null"
            - integer
            - string
          format: int32
        size:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - "null"
            - integer
            - string
          format: int64
        duration:
          pattern: ^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$
          type:
            - "null"
            - number
            - string
          format: double
        status:
          $ref: '#/components/schemas/MediaStatus'
        isVideo:
          type: boolean
        isImage:
          type: boolean
    StepType:
      enum:
        - FirstStep
        - FinalStep
        - RegularStep
    TestNotificationDto:
      type: object
      properties:
        title:
          type: string
        body:
          type: string
        userId:
          type:
            - "null"
            - string
        topic:
          type:
            - "null"
            - string
        deviceTokens:
          type:
            - "null"
            - array
          items:
            type: string
        data:
          type:
            - "null"
            - object
          additionalProperties:
            type: string
        priority:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
    TestNotificationResultDto:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
    TokenValidationResultDto:
      type: object
      properties:
        validatedCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
        invalidatedCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
        invalidTokens:
          type: array
          items:
            type: string
    UpdateFeedbackStatusDto:
      required:
        - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/FeedbackStatus'
        adminResponse:
          maxLength: 2000
          type:
            - "null"
            - string
    UpdateJourneyDto:
      required:
        - title
      type: object
      properties:
        title:
          maxLength: 255
          minLength: 1
          pattern: ^(?!\s*$).+
          type: string
          default: ""
        description:
          maxLength: 1000
          minLength: 0
          type:
            - "null"
            - string
    UpdatePreferencesDto:
      type: object
      properties:
        pushNotifications:
          type: boolean
        mentions:
          type: boolean
        oldStepNotifications:
          type: boolean
        trendingStepSuggestions:
          type: boolean
        trendingJourneySuggestions:
          type: boolean
        followSuggestions:
          type: boolean
    UpdateStepDto:
      required:
        - content
      type: object
      properties:
        content:
          maxLength: 1000
          type: string
          default: ""
    UpdateUserStatusDto:
      required:
        - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/UserStatus'
        reason:
          maxLength: 500
          type:
            - "null"
            - string
        additionalNotes:
          maxLength: 1000
          type:
            - "null"
            - string
    UserDetailDto:
      required:
        - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserDto'
        followingStatus:
          $ref: '#/components/schemas/FollowingStatusEnum'
    UserDto:
      required:
        - id
      type: object
      properties:
        id:
          type: string
        displayName:
          type: string
          default: ""
        username:
          type: string
          default: ""
        description:
          type: string
          default: ""
        profilePictureUrl:
          type: string
          default: ""
        phoneNumber:
          type:
            - "null"
            - string
        email:
          type:
            - "null"
            - string
        age:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - "null"
            - integer
            - string
          format: int32
        isPrivate:
          type: boolean
          default: false
        createdDate:
          type: string
          format: date-time
        lastUpdated:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/UserStatus'
        isRestricted:
          type: boolean
          default: false
        role:
          $ref: '#/components/schemas/NullableOfUserRole'
    UserStatus:
      enum:
        - Active
        - ShadowBanned
        - HardBanned
        - Deactivated
      default: Active
    VideoPreSignedUrlDto:
      type: object
      properties:
        authorizationSignature:
          type: string
          default: ""
        authorizationExpire:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int64
        videoGuid:
          type: string
          format: uuid
        libraryId:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
        title:
          type: string
          default: ""
        collectionId:
          type: string
          default: ""
        media:
          $ref: '#/components/schemas/StepMediaDto'
    VideoStatusDto:
      type: object
      properties:
        videoLibraryId:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
        videoGuid:
          type: string
          format: uuid
        status:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
            - integer
            - string
          format: int32
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: Json Web Token
tags:
  - name: Account
  - name: Auth
  - name: Users
  - name: Steps
  - name: Reports
  - name: AdminNotifications
  - name: DeviceToken
  - name: NotificationPreferences
  - name: Notifications
  - name: Moderation
  - name: Media
  - name: VideoProcessing
  - name: JourneyFollow
  - name: Journeys
  - name: Interactions
  - name: AccountFollow
  - name: UsersFollow
  - name: Feed
  - name: Comments
  - name: StepComments
  - name: AdminFeedback
  - name: AppFeedback
