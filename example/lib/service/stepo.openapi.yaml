openapi: 3.1.1
info:
  title: StepoBackend.Api | v1
  version: 1.0.0
paths:
  /api/v1/account:
    get:
      tags:
      - Account
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AccountDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
    delete:
      tags:
      - Account
      responses:
        "200":
          description: OK
    put:
      tags:
      - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserDto'
          text/json:
            schema:
              $ref: '#/components/schemas/EditUserDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/EditUserDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AccountDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
  /api/v1/account/avatar:
    post:
      tags:
      - Account
      requestBody:
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
          image/gif:
            schema:
              type: string
              format: binary
          image/webp:
            schema:
              type: string
              format: binary
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AccountDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
  /api/v1/account/journeys:
    get:
      tags:
      - Account
      parameters:
      - name: page
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 1
      - name: pageSize
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JourneyInProfileDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JourneyInProfileDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JourneyInProfileDto'
  /api/v1/account/steps:
    get:
      tags:
      - Account
      parameters:
      - name: page
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 1
      - name: pageSize
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
  /api/v1/account/feed:
    get:
      tags:
      - Account
      parameters:
      - name: page
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 1
      - name: pageSize
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
  /api/v1/auth/login:
    post:
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
          text/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LoginDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
            text/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
  /api/v1/users/{id}:
    get:
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProfileDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
  /api/v1/users/{id}/journeys:
    get:
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 1
      - name: pageSize
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JourneyInProfileDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JourneyInProfileDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JourneyInProfileDto'
  /api/v1/users/{id}/steps:
    get:
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 1
      - name: pageSize
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
  /api/v1/steps:
    post:
      tags:
      - Steps
      summary: Create a new step for a journey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStepDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateStepDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateStepDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
  /api/v1/steps/{stepId}:
    get:
      tags:
      - Steps
      summary: Get step details by ID
      parameters:
      - name: stepId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
    put:
      tags:
      - Steps
      summary: Update step details
      parameters:
      - name: stepId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStepDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateStepDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateStepDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
    delete:
      tags:
      - Steps
      summary: Delete a step
      parameters:
      - name: stepId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
  /api/v1/steps/{stepId}/images:
    post:
      tags:
      - Steps
      summary: Upload an image for a step
      parameters:
      - name: stepId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
          image/gif:
            schema:
              type: string
              format: binary
          image/webp:
            schema:
              type: string
              format: binary
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StepMediaDto'
            application/json:
              schema:
                $ref: '#/components/schemas/StepMediaDto'
            text/json:
              schema:
                $ref: '#/components/schemas/StepMediaDto'
  /api/v1/steps/{stepId}/video:
    put:
      tags:
      - Steps
      summary: Get video upload URL for a step
      parameters:
      - name: stepId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/VideoPreSignedUrlDto'
            application/json:
              schema:
                $ref: '#/components/schemas/VideoPreSignedUrlDto'
            text/json:
              schema:
                $ref: '#/components/schemas/VideoPreSignedUrlDto'
  /api/v1/reports:
    post:
      tags:
      - Reports
      summary: Create a report for inappropriate content
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportCreatingDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ReportCreatingDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ReportCreatingDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ReportDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ReportDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ReportDto'
    get:
      tags:
      - Reports
      summary: Get reports for content moderation
      parameters:
      - name: page
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 1
      - name: pageSize
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 15
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportDto'
  /api/v1/notifications:
    get:
      tags:
      - Notifications
      parameters:
      - name: page
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 1
      - name: pageSize
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 20
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotificationPagedDto'
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPagedDto'
            text/json:
              schema:
                $ref: '#/components/schemas/NotificationPagedDto'
    post:
      tags:
      - Notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendNotificationDto'
          text/json:
            schema:
              $ref: '#/components/schemas/SendNotificationDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SendNotificationDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NotificationDto'
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationDto'
            text/json:
              schema:
                $ref: '#/components/schemas/NotificationDto'
  /api/v1/notifications/summary:
    get:
      tags:
      - Notifications
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                pattern: ^-?(?:0|[1-9]\d*)$
                type:
                - integer
                - string
                format: int32
            application/json:
              schema:
                pattern: ^-?(?:0|[1-9]\d*)$
                type:
                - integer
                - string
                format: int32
            text/json:
              schema:
                pattern: ^-?(?:0|[1-9]\d*)$
                type:
                - integer
                - string
                format: int32
  /api/v1/notifications/{notificationId}/read:
    put:
      tags:
      - Notifications
      parameters:
      - name: notificationId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
  /api/v1/notifications/read-status:
    put:
      tags:
      - Notifications
      responses:
        "200":
          description: OK
  /api/v1/notifications/{notificationId}:
    delete:
      tags:
      - Notifications
      parameters:
      - name: notificationId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
  /api/v1/notifications/bulk:
    post:
      tags:
      - Notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkNotificationDto'
          text/json:
            schema:
              $ref: '#/components/schemas/BulkNotificationDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BulkNotificationDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationDto'
  /api/v1/media/images/upload:
    post:
      tags:
      - Media
      parameters:
      - name: stepId
        in: query
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  $ref: '#/components/schemas/IFormFile'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StepMediaDto'
            application/json:
              schema:
                $ref: '#/components/schemas/StepMediaDto'
            text/json:
              schema:
                $ref: '#/components/schemas/StepMediaDto'
  /api/v1/media/videos:
    post:
      tags:
      - Media
      parameters:
      - name: stepId
        in: query
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/VideoPreSignedUrlDto'
            application/json:
              schema:
                $ref: '#/components/schemas/VideoPreSignedUrlDto'
            text/json:
              schema:
                $ref: '#/components/schemas/VideoPreSignedUrlDto'
  /api/v1/media/{mediaId}:
    get:
      tags:
      - Media
      parameters:
      - name: mediaId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StepMediaDto'
            application/json:
              schema:
                $ref: '#/components/schemas/StepMediaDto'
            text/json:
              schema:
                $ref: '#/components/schemas/StepMediaDto'
  /api/v1/webhooks/video-updates:
    post:
      tags:
      - VideoProcessing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoStatusDto'
          text/json:
            schema:
              $ref: '#/components/schemas/VideoStatusDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/VideoStatusDto'
        required: true
      responses:
        "200":
          description: OK
  /api/v1/video-jobs:
    post:
      tags:
      - VideoProcessing
      responses:
        "200":
          description: OK
  /api/v1/journeys/{id}:
    get:
      tags:
      - Journeys
      summary: Get journey details by ID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/JourneyInDetailDto'
            application/json:
              schema:
                $ref: '#/components/schemas/JourneyInDetailDto'
            text/json:
              schema:
                $ref: '#/components/schemas/JourneyInDetailDto'
    put:
      tags:
      - Journeys
      summary: Update journey details
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateJourneyDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateJourneyDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateJourneyDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/JourneyDto'
            application/json:
              schema:
                $ref: '#/components/schemas/JourneyDto'
            text/json:
              schema:
                $ref: '#/components/schemas/JourneyDto'
    delete:
      tags:
      - Journeys
      summary: Delete a journey
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
  /api/v1/journeys:
    post:
      tags:
      - Journeys
      summary: Create a new journey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JourneyCreatingDto'
          text/json:
            schema:
              $ref: '#/components/schemas/JourneyCreatingDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/JourneyCreatingDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                $ref: '#/components/schemas/StepDetailDto'
  /api/v1/journeys/{id}/close:
    post:
      tags:
      - Journeys
      summary: Close a journey
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: finalStepId
        in: query
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/JourneyDto'
            application/json:
              schema:
                $ref: '#/components/schemas/JourneyDto'
            text/json:
              schema:
                $ref: '#/components/schemas/JourneyDto'
  /api/v1/journeys/{id}/reopen:
    post:
      tags:
      - Journeys
      summary: Reopen a closed journey
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/JourneyDto'
            application/json:
              schema:
                $ref: '#/components/schemas/JourneyDto'
            text/json:
              schema:
                $ref: '#/components/schemas/JourneyDto'
  /api/v1/journeys/{journeyId}/steps-detail:
    get:
      tags:
      - Journeys
      summary: Get detailed steps for a journey (authenticated view)
      parameters:
      - name: journeyId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: page
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 1
      - name: pageSize
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
  /api/v1/journeys/{journeyId}/steps:
    get:
      tags:
      - Journeys
      summary: Get steps for a journey (public view)
      parameters:
      - name: journeyId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: page
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 1
      - name: pageSize
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
  /api/v1/journeys/{journeyId}/calendar:
    get:
      tags:
      - Journeys
      summary: Get calendar view of journey steps
      parameters:
      - name: journeyId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JourneyDayCalendarDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JourneyDayCalendarDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JourneyDayCalendarDto'
  /api/v1/journeys/newer-steps/{stepId}:
    get:
      tags:
      - Journeys
      summary: Get steps newer than the specified step within its journey
      parameters:
      - name: stepId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: page
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 1
      - name: pageSize
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
  /api/v1/journeys/older-steps/{stepId}:
    get:
      tags:
      - Journeys
      summary: Get steps older than the specified step within its journey
      parameters:
      - name: stepId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: page
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 1
      - name: pageSize
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepDetailDto'
  /api/v1/steps/{stepId}/hearts:
    post:
      tags:
      - Interactions
      parameters:
      - name: stepId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStepInteractionDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateStepInteractionDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateStepInteractionDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
    delete:
      tags:
      - Interactions
      parameters:
      - name: stepId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
  /api/v1/steps/{stepId}/shares:
    post:
      tags:
      - Interactions
      parameters:
      - name: stepId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStepInteractionDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateStepInteractionDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateStepInteractionDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
  /api/v1/steps/{stepId}/interactions:
    get:
      tags:
      - Interactions
      parameters:
      - name: stepId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/InteractionResultDto'
  /api/v1/steps/comments/{commentId}/hearts:
    post:
      tags:
      - Interactions
      parameters:
      - name: commentId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentInteractionDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateCommentInteractionDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateCommentInteractionDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
    delete:
      tags:
      - Interactions
      parameters:
      - name: commentId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
  /api/v1/account/followers:
    get:
      tags:
      - AccountFollow
      summary: Get my followers list
      parameters:
      - name: page
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 1
      - name: pageSize
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
  /api/v1/account/followings:
    get:
      tags:
      - AccountFollow
      summary: Get my followings list
      parameters:
      - name: page
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 1
      - name: pageSize
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
  /api/v1/users/{userId}/follow:
    post:
      tags:
      - UsersFollow
      summary: Follow a user
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FollowingResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/FollowingResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/FollowingResultDto'
    delete:
      tags:
      - UsersFollow
      summary: Unfollow a user
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FollowingResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/FollowingResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/FollowingResultDto'
  /api/v1/users/{userId}/reject-follow:
    post:
      tags:
      - UsersFollow
      summary: Reject a follow request
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FollowingResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/FollowingResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/FollowingResultDto'
  /api/v1/users/{userId}/follow-status:
    get:
      tags:
      - UsersFollow
      summary: Get following status with a user
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FollowingStatusDto'
            application/json:
              schema:
                $ref: '#/components/schemas/FollowingStatusDto'
            text/json:
              schema:
                $ref: '#/components/schemas/FollowingStatusDto'
  /api/v1/users/{userId}/followers:
    get:
      tags:
      - UsersFollow
      summary: Get user's followers list
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 1
      - name: pageSize
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
  /api/v1/users/{userId}/followings:
    get:
      tags:
      - UsersFollow
      summary: Get user's followings list
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 1
      - name: pageSize
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailDto'
  /api/v1/users/{userId}/followers/count:
    get:
      tags:
      - UsersFollow
      summary: Get user's followers count
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                pattern: ^-?(?:0|[1-9]\d*)$
                type:
                - integer
                - string
                format: int32
            application/json:
              schema:
                pattern: ^-?(?:0|[1-9]\d*)$
                type:
                - integer
                - string
                format: int32
            text/json:
              schema:
                pattern: ^-?(?:0|[1-9]\d*)$
                type:
                - integer
                - string
                format: int32
  /api/v1/users/{userId}/followings/count:
    get:
      tags:
      - UsersFollow
      summary: Get user's followings count
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                pattern: ^-?(?:0|[1-9]\d*)$
                type:
                - integer
                - string
                format: int32
            application/json:
              schema:
                pattern: ^-?(?:0|[1-9]\d*)$
                type:
                - integer
                - string
                format: int32
            text/json:
              schema:
                pattern: ^-?(?:0|[1-9]\d*)$
                type:
                - integer
                - string
                format: int32
  /api/v1/comments/{commentId}:
    delete:
      tags:
      - Comments
      summary: Delete a comment
      parameters:
      - name: commentId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
  /api/v1/comments/{parentCommentId}/replies:
    post:
      tags:
      - Comments
      summary: Create a reply to a comment
      parameters:
      - name: parentCommentId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReplyCommentDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateReplyCommentDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateReplyCommentDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ReplyDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ReplyDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ReplyDto'
  /api/v1/comments/{commentId}/replies:
    get:
      tags:
      - Comments
      summary: Get replies for a comment
      parameters:
      - name: commentId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: page
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 1
      - name: pageSize
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplyDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplyDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplyDto'
  /api/v1/steps/{stepId}/comments:
    get:
      tags:
      - StepComments
      parameters:
      - name: stepId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: page
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 1
      - name: pageSize
        in: query
        schema:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepCommentDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepCommentDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StepCommentDto'
    post:
      tags:
      - StepComments
      parameters:
      - name: stepId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStepCommentDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateStepCommentDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateStepCommentDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StepCommentDto'
            application/json:
              schema:
                $ref: '#/components/schemas/StepCommentDto'
            text/json:
              schema:
                $ref: '#/components/schemas/StepCommentDto'
components:
  schemas:
    AccountDto:
      required:
      - id
      - profile
      type: object
      properties:
        id:
          type: string
        profile:
          $ref: '#/components/schemas/ProfileDto'
    BulkNotificationDto:
      required:
      - title
      - body
      - notificationType
      - userIds
      type: object
      properties:
        title:
          maxLength: 100
          type: string
        body:
          maxLength: 500
          type: string
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        userIds:
          minItems: 1
          type: array
          items:
            type: string
        relatedEntityId:
          type:
          - "null"
          - string
          format: uuid
        data:
          type:
          - "null"
          - object
          additionalProperties:
            type: string
        priority:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
    CreateCommentInteractionDto:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/InteractionType'
    CreateReplyCommentDto:
      required:
      - content
      type: object
      properties:
        content:
          maxLength: 500
          type: string
        responseToUserId:
          type:
          - "null"
          - string
        responseToCommentId:
          type:
          - "null"
          - string
          format: uuid
    CreateStepCommentDto:
      required:
      - content
      type: object
      properties:
        content:
          maxLength: 500
          type: string
    CreateStepDto:
      required:
      - content
      - journeyId
      type: object
      properties:
        content:
          maxLength: 1000
          type: string
        journeyId:
          type: string
          format: uuid
    CreateStepInteractionDto:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/InteractionType'
    EditUserDto:
      required:
      - displayName
      - username
      type: object
      properties:
        displayName:
          maxLength: 50
          minLength: 1
          type: string
        username:
          maxLength: 20
          minLength: 1
          type: string
        description:
          maxLength: 160
          type: string
        isPrivate:
          type: boolean
    FollowingResultDto:
      required:
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/FollowingStatusEnum'
        message:
          type:
          - "null"
          - string
    FollowingStatusDto:
      required:
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/FollowingStatusEnum'
    FollowingStatusEnum:
      enum:
      - NotFollowing
      - Following
      - Requested
    IFormFile:
      type: string
      format: binary
    InteractionResultDto:
      type: object
      properties:
        isSteppedWith:
          type: boolean
        isLiked:
          type: boolean
        totalLikes:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
    InteractionType:
      enum:
      - Heart
      - Share
      - Comment
    JourneyCreatingDto:
      required:
      - title
      - firstStepContent
      type: object
      properties:
        title:
          maxLength: 100
          minLength: 1
          pattern: ^(?!\s*$).+
          type: string
        description:
          maxLength: 500
          minLength: 0
          type:
          - "null"
          - string
        firstStepContent:
          maxLength: 1000
          minLength: 1
          pattern: ^(?!\s*$).+
          type: string
    JourneyDayCalendarDto:
      required:
      - lastStep
      - date
      type: object
      properties:
        lastStep:
          $ref: '#/components/schemas/StepDto'
        totalSteps:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
          default: 0
        date:
          type: string
          format: date-time
    JourneyDto:
      type:
      - "null"
      - object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type:
          - "null"
          - string
        createdDate:
          type: string
          format: date-time
        lastUpdated:
          type:
          - "null"
          - string
          format: date-time
        status:
          type: string
        completedDate:
          type:
          - "null"
          - string
          format: date-time
        userId:
          type: string
        firstStepId:
          type:
          - "null"
          - string
          format: uuid
        finalStepId:
          type:
          - "null"
          - string
          format: uuid
    JourneyInDetailDto:
      required:
      - journey
      - stepsCount
      - lastStepDate
      type: object
      properties:
        journey:
          $ref: '#/components/schemas/JourneyDto'
        stepsCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        lastStepDate:
          type: string
          format: date-time
        stepperCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        latestSteppers:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        starterCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        latestStarters:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        companionCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        latestCompanions:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        celebratorCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        latestCelebrators:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
    JourneyInProfileDto:
      required:
      - journey
      - stepsCount
      - thumbnailSteps
      type: object
      properties:
        journey:
          $ref: '#/components/schemas/JourneyDto'
        stepsCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        thumbnailSteps:
          type: array
          items:
            $ref: '#/components/schemas/StepMediaDto'
    LoginDto:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    LoginResponseDto:
      type: object
      properties:
        token:
          type: string
        uid:
          type: string
    MediaStatus:
      enum:
      - Pending
      - Processing
      - Completed
      - Failed
    NotificationDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        body:
          type: string
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        isRead:
          type: boolean
        createdDate:
          type: string
          format: date-time
        data:
          type:
          - "null"
          - object
          additionalProperties:
            type: string
        priority:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        relatedEntityId:
          type:
          - "null"
          - string
          format: uuid
        sourceUser:
          $ref: '#/components/schemas/UserDetailDto'
    NotificationPagedDto:
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/NotificationDto'
        page:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        pageSize:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        totalCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        unreadCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        hasMore:
          type: boolean
    NotificationType:
      enum:
      - Global
      - UserSpecific
      - StepComment
      - CommentReply
      - NewFollower
      - JourneyUpdate
      - StepInteraction
      - StepWithInteraction
      - SystemAlert
    ProfileDto:
      required:
      - userDetail
      type: object
      properties:
        userDetail:
          $ref: '#/components/schemas/UserDetailDto'
        badgesCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        badgesUsers:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        supportersCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        supportersUsers:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        followersCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        followingsCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
    ReplyDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
        createdDate:
          type: string
          format: date-time
        lastUpdated:
          type:
          - "null"
          - string
          format: date-time
        deletedDate:
          type:
          - "null"
          - string
          format: date-time
        user:
          $ref: '#/components/schemas/UserDto'
        parentCommentId:
          type: string
          format: uuid
        responseToUser:
          $ref: '#/components/schemas/UserDto'
        responseToCommentId:
          type:
          - "null"
          - string
          format: uuid
        heartCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        heartedByUser:
          type: boolean
    ReportCreatingDto:
      required:
      - entityType
      - entityId
      - reason
      type: object
      properties:
        entityType:
          type: string
        entityId:
          type: string
        reason:
          maxLength: 500
          type: string
    ReportDto:
      required:
      - entityType
      - reason
      type: object
      properties:
        id:
          type: string
          format: uuid
        entityType:
          type: string
        entityId:
          type: string
        reporter:
          $ref: '#/components/schemas/UserDto'
        reason:
          type: string
        createdDate:
          type: string
          format: date-time
    SendNotificationDto:
      required:
      - title
      - body
      - notificationType
      type: object
      properties:
        title:
          maxLength: 100
          type: string
        body:
          maxLength: 500
          type: string
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        targetUserId:
          type:
          - "null"
          - string
        relatedEntityId:
          type:
          - "null"
          - string
          format: uuid
        scheduledFor:
          type:
          - "null"
          - string
          format: date-time
        data:
          type:
          - "null"
          - object
          additionalProperties:
            type: string
        priority:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
    StepCommentDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type:
          - "null"
          - string
          format: date-time
        deletedAt:
          type:
          - "null"
          - string
          format: date-time
        user:
          $ref: '#/components/schemas/UserDto'
        stepId:
          type: string
          format: uuid
        heartCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        heartedByUser:
          type: boolean
        replyCount:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
    StepDetailDto:
      required:
      - id
      - user
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
        createdDate:
          type: string
          format: date-time
        lastUpdated:
          type: string
          format: date-time
        userId:
          type: string
        user:
          $ref: '#/components/schemas/UserDto'
        journeyId:
          type: string
          format: uuid
        journey:
          $ref: '#/components/schemas/JourneyDto'
        hearts:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        heartedByUser:
          type: boolean
        shares:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        sharedByUser:
          type: boolean
        comments:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        commentedByUser:
          type: boolean
        userSteppedWithInteractions:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        othersStepWith:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        othersStepWithUsers:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        stepTypeString:
          type:
          - "null"
          - string
        media:
          type: array
          items:
            $ref: '#/components/schemas/StepMediaDto'
    StepDto:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
        createdDate:
          type: string
          format: date-time
        lastUpdated:
          type: string
          format: date-time
        userId:
          type: string
        journeyId:
          type: string
          format: uuid
        media:
          $ref: '#/components/schemas/StepMediaDto'
    StepMediaDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        stepId:
          type: string
          format: uuid
        mediaType:
          type: string
        originalUrl:
          type: string
        largeUrl:
          type:
          - "null"
          - string
        mediumUrl:
          type:
          - "null"
          - string
        smallUrl:
          type:
          - "null"
          - string
        thumbnailUrl:
          type:
          - "null"
          - string
        videoThumbnailUrl:
          type:
          - "null"
          - string
        bunnyVideoId:
          type:
          - "null"
          - string
        width:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - "null"
          - integer
          - string
          format: int32
        height:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - "null"
          - integer
          - string
          format: int32
        size:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - "null"
          - integer
          - string
          format: int64
        duration:
          pattern: ^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$
          type:
          - "null"
          - number
          - string
          format: double
        status:
          $ref: '#/components/schemas/MediaStatus'
        isVideo:
          type: boolean
        isImage:
          type: boolean
    Stream:
      type: string
      format: binary
    UpdateJourneyDto:
      required:
      - title
      type: object
      properties:
        title:
          maxLength: 255
          minLength: 1
          pattern: ^(?!\s*$).+
          type: string
        description:
          maxLength: 1000
          minLength: 0
          type:
          - "null"
          - string
    UpdateStepDto:
      required:
      - content
      type: object
      properties:
        content:
          maxLength: 1000
          type: string
    UserDetailDto:
      required:
      - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserDto'
        followingStatus:
          $ref: '#/components/schemas/FollowingStatusEnum'
    UserDto:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        displayName:
          type: string
        username:
          type: string
        description:
          type: string
        profilePictureUrl:
          type:
          - "null"
          - string
        phoneNumber:
          type:
          - "null"
          - string
        email:
          type:
          - "null"
          - string
        age:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - "null"
          - integer
          - string
          format: int32
        isPrivate:
          type: boolean
        createdDate:
          type: string
          format: date-time
        lastUpdated:
          type: string
          format: date-time
    VideoPreSignedUrlDto:
      type: object
      properties:
        authorizationSignature:
          type: string
        authorizationExpire:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int64
        videoGuid:
          type: string
          format: uuid
        libraryId:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        title:
          type: string
        collectionId:
          type: string
        media:
          $ref: '#/components/schemas/StepMediaDto'
    VideoStatusDto:
      type: object
      properties:
        videoLibraryId:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
        videoGuid:
          type: string
          format: uuid
        status:
          pattern: ^-?(?:0|[1-9]\d*)$
          type:
          - integer
          - string
          format: int32
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: Json Web Token
tags:
- name: Account
- name: Auth
- name: Users
- name: Steps
- name: Reports
- name: Notifications
- name: Media
- name: VideoProcessing
- name: Journeys
- name: Interactions
- name: AccountFollow
- name: UsersFollow
- name: Comments
- name: StepComments
